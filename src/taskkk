Ваша задача — разработать сервис сокращения ссылок с возможностью управления лимитом переходов и времени жизни ссылки. Этот сервис должен быть интуитивно понятным для пользователей и включать все функции, которые описаны в техническом задании.

Этап 1. Изучение ТЗ и планирование
Определите все ключевые функции, которые нужно реализовать в проекте. Убедитесь, что вы понимаете, как работает каждая часть системы, прежде чем приступать к реализации.

Основные задачи:

Создание коротких ссылок. Система должна принимать длинный URL и преобразовывать его в короткую ссылку. Пример: при передаче ссылки https://www.baeldung.com/java-9-http-client вы должны получить короткий вариант clck.ru/3DZHeG.
Уникальные ссылки для каждого пользователя. Если один и тот же ресурс сокращают разные пользователи, они должны получать уникальные сокращенные ссылки.
Лимит переходов. Пользователь может задать максимальное количество переходов по ссылке. Как только этот лимит исчерпан, ссылка должна стать недоступной.
Ограничение времени жизни ссылки. Время жизни ссылки должно задаваться системой и ограничиваться определенным сроком (например, сутки). После истечения этого срока ссылка должна автоматически удаляться.
Уведомление пользователя. Пользователь должен получать уведомление, если лимит переходов исчерпан или время жизни ссылки истекло.
Идентификация пользователя по UUID. Каждый пользователь идентифицируется без авторизации с помощью UUID, который генерируется при первом запросе на создание короткой ссылки. Этот UUID используется для отслеживания всех действий пользователя с его ссылками.











Этап 2. Реализация основных функций
1. Сокращение ссылки.

Разработайте алгоритм, который будет преобразовывать длинные URL в короткие.
Убедитесь, что разные пользователи получают разные короткие ссылки на один и тот же URL.
2. Лимит переходов.

Реализуйте систему, которая будет отслеживать количество переходов по каждой ссылке.
Как только лимит переходов будет исчерпан, пользователь должен быть уведомлен о недоступности ссылки, и её использование должно блокироваться.
3. Время жизни ссылки.

Ваша программа должна автоматически удалять ссылки, срок действия которых истек. Это может быть, например, через сутки после создания.
Время жизни ссылки должно задаваться программно, а не пользователем.
4. Идентификация пользователя.

UUID пользователя генерируется при первом запросе на создание короткой ссылки и сохраняется для последующей работы с его ссылками.
Все действия по редактированию или удалению ссылок доступны только создателю этой ссылки.
5. Переход по короткой ссылке.

При вводе короткой ссылки в консоль пользователь должен автоматически перенаправляться на исходный ресурс в браузере:

Desktop.getDesktop().browse(new URI("https://ru.stackoverflow.com"));











Этап 3. Тестирование системы
После реализации всех функций вам нужно провести тестирование. Вот ключевые моменты для проверки:

Убедитесь, что одна и та же ссылка, сокращенная разными пользователями, генерирует уникальные короткие ссылки.
Проверьте, что при исчерпании лимита переходов переход по ссылке блокируется.
Тестируйте удаление ссылок по истечении срока жизни. Попробуйте задать различные временные интервалы (например, час или сутки) и убедитесь, что система корректно удаляет «протухшие» ссылки.
Убедитесь, что пользователи получают уведомления о том, что их ссылка недоступна из-за исчерпания лимита или истечения срока жизни.












Этап 4. Подготовка к сдаче
Опишите процесс создания и работы с сервисом. Подготовьте инструкцию для пользователя, как пользоваться созданными функциями.
Сохраните код на GitHub. Это будет важно не только для проверки вашей работы ментором, но и для того, чтобы проект стал частью вашего портфолио.
Убедитесь, что вы реализовали все функции согласно ТЗ и протестировали сервис.
Результат работы
После завершения проекта ваш сервис должен уметь:

Принимать длинные URL и возвращать уникальные короткие ссылки.
Обрабатывать лимит переходов и блокировать ссылку после достижения лимита.
Удалять «протухшие» ссылки по истечении времени.
Уведомлять пользователя о недоступности ссылки.
Управляться через консоль, включая переходы по сокращенным ссылкам.



======================== ПЛАН =======================================

пользователь начинает работу с ввода команды "начать"
после этого создается новый пользователь со своим UUID и действительно это вё будет только втечение сессии
После авторизации пользователь должен ввести длинную ссылку (после предложения сделать это) и задать сколько переходов ссылка действительна (через ентер)

при генерации короткой ссылки, ей присваивается переменная (int lifeTime) количества переходов и системно будет даваться 2 минуты жизни
(для продления жизни ссылки можно будет добавить какую-нибудь секретную команду
генерить ссыль отдельно, а не обрезаением UUID

после ввода ссылки будет открываться браузер и уменьшаться значение переменной lifeTime

если ссылка тю-тю, пользователю выдаётся сообщение (ваша ссылка утратила свою волшебную силу и более недействительна) и удалять ссылку



============ РЕЗЕРВНАЯ КОПИЯ КОДА ====================

import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;

public class Main {
    public static void main(String[] args) throws URISyntaxException, IOException {

        Scanner startScanner = new Scanner(System.in);
        System.out.println("Для начала работы введите start");
        if (startScanner.next().equals("start")) {
            System.out.println("started");

            //генерация пользователя

            UUID uuid = UUID.randomUUID(); //генерация случайного UUID
            System.out.println("Ваш UUID на текущую сессию " + UUID.randomUUID());


            //обрезание ссылки (можно будет заменить на генерацию из случайных символов)

            Scanner longURL = new Scanner(System.in);
            System.out.println("Введите длинную сылку для генерации сокращённой) и количество переходов по ссылке");
            String originalURL = longURL.nextLine();
            System.out.println("Ваша длинная ссылка: " + originalURL);


            String ShortUUID = UUID.randomUUID().toString().substring(0, 6);
            System.out.println("short UUID " + ShortUUID.toString());
            final String[] shortURL = {originalURL.substring(0, 8) + ShortUUID};
            System.out.println("Ваша короткая ссылка: " + shortURL[0]);

            //задаю время жизни ссылки
            Timer timer = new Timer();

            TimerTask task = new TimerTask() {
                public void run() {
                    shortURL[0] = null;
                }
            };
            Date startTime = new Date();
            timer.schedule(task, startTime, 60000);


            //тест ссылки

            System.out.println("Теперь можете ввести или скопировать короткую ссылку в консоль чтобы перейти по адресу");
            Scanner newLink = new Scanner(System.in);
            if (newLink.nextLine().equals(shortURL[0])) {
                String replace = shortURL[0].replace(originalURL, shortURL[0]);
                Desktop.getDesktop().browse(new URI(originalURL));
            } else {
                System.out.println("Ссылка неверная или более недействительна");
            }

        } else {
            System.out.println("wrong command");
            }
    }
}






